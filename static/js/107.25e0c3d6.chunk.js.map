{"version":3,"sources":["services/service.js","views/rider/Riders.js"],"names":["TAABEDAR_SERVICE","fields","key","_style","width","table","placeholder","label","items","values","Riders","useState","responseData","setResponseData","riderpkid","setRiderpkid","Suggestion","SetSuggestion","Reason","SetReason","block","setBlock","history","useHistory","GetRiders","axios","method","url","headers","params","language_code","then","response","data","catch","error","console","log","React","useEffect","id","col","hover","striped","bordered","sorter","tableFilter","itemsPerPage","pagination","size","itemsPerPageSelect","scopedSlots","item","Block","md","onClick","pkid","Name","push","Email","Mobile","dlNo","totalOrders","totalDistance","TotalOrders","Ratings","nonRespondedOrders","show","onClose","color","closeButton","custom","name","value","onChange","event","target","multiline","rows","variant","style","class","alert"],"mappings":"8JAGeA,IAFb,sE,6JCwBIC,EAAS,CACb,CACEC,IAAK,SAEP,CACEA,IAAK,QACLC,OAAQ,CAAEC,MAAO,QAGnB,CACEF,IAAK,QAEP,CACEA,IAAK,UAEP,CACEA,IAAK,UAEP,CACEA,IAAK,QAEP,CACEA,IAAK,SAEP,CACEA,IAAK,gBAEP,CACEA,IAAK,kBAEP,CACEA,IAAK,kBAEP,CACEA,IAAK,wBAEP,CACEA,IAAK,mBAIHG,EAAQ,CAAEC,YAAa,iBAAkBC,MAAO,aAChDC,EAAQ,CAAED,MAAO,OAAQE,OAAQ,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,MA4Q5CC,UA1QA,WACb,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA4BN,mBAAS,IAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAA0BR,oBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KAEMC,EAAUC,cAEVC,EAAY,WAChBC,IAAM,CACJC,OAAQ,MACRC,IAAK3B,IAAmB,aACxB4B,QAAS,CACP,eAAgB,oBAElBC,OAAQ,CACNC,cAAe,QAGhBC,MAAK,SAACC,GACLnB,EAAgBmB,EAASC,SAE1BC,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAGlBG,IAAMC,WAAU,WACdf,MACC,IAgEH,OACE,gCACE,oBAAIgB,GAAG,WAAP,oBACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,IAAI,KAAV,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,+BACA,eAAC,IAAD,WACE,cAAC,IAAD,CACEjC,MAAOI,EACPX,OAAQA,EACRyC,OAAK,EACLC,SAAO,EACPC,UAAQ,EACRC,QAAM,EACNC,YAAazC,EACb0C,aAAc,EACdC,YAAU,EACVC,KAAK,KACLC,mBAAoB1C,EACpB2C,YAAa,CACX,QAAS,SAACC,GAAD,OAAU,6BAAKA,EAAKZ,MAC7Ba,MAAO,SAACD,GAAD,OACL,6BACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAME,GAAG,IAAT,SACE,cAAC,IAAD,CACEL,KAAK,KACLT,GAAG,aACHe,QAAS,WA9C3B,IAACC,IA+C2BJ,EAAKI,KA9C/CvC,EAAc,qBACdE,EAAU,IACVJ,EAAayC,GACbnC,GAAUD,IAuCoB,SAOE,cAAC,IAAD,aAOVqC,KAAM,SAACL,GAAD,OACJ,6BACG,cAAC,IAAD,CACCZ,GAAG,aACHe,QAAS,WACPjC,EAAQoC,KAAM,gBAAiB,CAC7BzB,KAAMmB,KAJX,SAQEA,EAAKK,UAKZ,SAAU,SAACL,GAAD,OAAU,6BAAKA,EAAKO,SAC9BC,OAAQ,SAACR,GAAD,OAAU,6BAAKA,EAAKQ,UAC5B,QAAS,SAACR,GAAD,OAAU,6BAAKA,EAAKS,QAC7B,eAAgB,SAACT,GAAD,OACd,6BACE,cAAC,IAAD,CACEZ,GAAG,aACHe,QAAS,WACPjC,EAAQoC,KAAK,mBAAoB,CAC/BzB,KAAMmB,EAAKI,QAJjB,SAQGJ,EAAKU,iBAIZ,iBAAkB,SAACV,GAAD,OAChB,6BAAKA,EAAKW,iBAEZ,iBAAkB,SAACX,GAAD,OAChB,6BAAKA,EAAKY,eAEZC,QAAS,SAACb,GAAD,OAAU,6BAAK,KACxB,iBAAkB,SAACA,GAAD,OAAU,6BAAK,OACjC,uBAAwB,SAACA,GAAD,OACtB,6BACE,cAAC,IAAD,CACEZ,GAAG,aACHe,QAAS,WACPjC,EAAQoC,KAAK,2BAA4B,CACvCzB,KAAMmB,EAAKI,QAJjB,SAQGJ,EAAKc,2BAMhB,eAAC,IAAD,CACEC,KAAM/C,EACNgD,QAAS,kBAAM/C,GAAUD,IACzBiD,MAAM,OAHR,UAKE,cAAC,IAAD,CAAcC,aAAW,EAAzB,SACE,cAAC,IAAD,gCAEF,eAAC,IAAD,WACE,uBACA,uBACA,cAAC,IAAD,4CACA,eAAC,IAAD,CACEC,QAAM,EACNC,KAAK,aACLhC,GAAG,aACHiC,MAAOzD,EACP0D,SA3HD,SAACC,GACxB1D,EAAc0D,EAAMC,OAAOH,QAqHL,UAOE,wBAAQA,MAAM,oBAAd,+BAGA,wBAAQA,MAAM,oBAAd,+BAGA,wBAAQA,MAAM,gBAAd,2BACA,wBAAQA,MAAM,cAAd,4BAEF,uBACA,uBAEA,cAAC,IAAD,CACEjC,GAAG,4BACHjC,MAAM,kBACNsE,WAAS,EACTC,KAAM,EACNJ,SA3IL,SAACC,GACpBxD,EAAUwD,EAAMC,OAAOH,QA2ICA,MAAOvD,EACP6D,QAAQ,WACRC,MAAO,CACL5E,MAAO,UAGX,uBACA,uBACA,cAAC,IAAD,CACE6E,MAAM,6BACN1B,QAAS,kBAjNfC,EAiNgC1C,EAhNlDsB,QAAQC,IAAI,WAAamB,GACzBpB,QAAQC,IAAI,iBAAmBrB,GAC/BoB,QAAQC,IAAI,aAAenB,QAET,qBAAdF,EACFkE,MAAM,4BACa,IAAVhE,GAA0B,MAAVA,EACzBgE,MAAM,sBAENzD,IAAM,CACJC,OAAQ,MACRC,IACE3B,IACA,gBACAwD,EACA,IACAtC,EACA,IACAF,EAEFY,QAAS,CACP,eAAgB,oBAElBC,OAAQ,CACNC,cAAe,QAGhBC,MAAK,SAACC,GACLI,QAAQC,IAAI,yBAA2BL,EAASC,MAC3B,GAAjBD,EAASC,MACXiD,MAAM,qBACN1D,IACAH,GAAUD,GACVH,EAAc,qBACdE,EAAU,MAEV+D,MAAM,yBACN1D,IACAP,EAAc,qBACdE,EAAU,QAGbe,OAAM,SAACC,GACNC,QAAQC,IAAIF,OA5CD,IAACqB,GA+MI,uBAOF,cAAC,IAAD,UACE,cAAC,IAAD,CACEa,MAAM,YACNd,QAAS,kBAAMlC,GAAUD,IAF3B","file":"static/js/107.25e0c3d6.chunk.js","sourcesContent":["const TAABEDAR_SERVICE =\r\n  'http://192.168.1.3:8086/Tabedar_Dashboard/resourses/projectservice';\r\n\r\nexport default TAABEDAR_SERVICE;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CButton,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CLink,\r\n  CSelect,\r\n  CLabel,\r\n  CCardHeader,\r\n} from \"@coreui/react\";\r\nimport \"../../style.css\";\r\nimport TAABEDAR_SERVICE from \"src/services/service\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport NoEncryptionSharpIcon from \"@material-ui/icons/NoEncryptionSharp\";\r\n\r\nconst fields = [\r\n  {\r\n    key: \"Sl No\",\r\n  },\r\n  {\r\n    key: \"Block\",\r\n    _style: { width: \"10%\" },\r\n  },\r\n\r\n  {\r\n    key: \"Name\",\r\n  },\r\n  {\r\n    key: \"E-Mail\",\r\n  },\r\n  {\r\n    key: \"Mobile\",\r\n  },\r\n  {\r\n    key: \"City\",\r\n  },\r\n  {\r\n    key: \"DL No\",\r\n  },\r\n  {\r\n    key: \"Total Orders\",\r\n  },\r\n  {\r\n    key: \"Total Distance\",\r\n  },\r\n  {\r\n    key: \"Total Delivery\",\r\n  },\r\n  {\r\n    key: \"Non Responded Orders\",\r\n  },\r\n  {\r\n    key: \"Total Earnings\",\r\n  },\r\n];\r\n\r\nconst table = { placeholder: \"Search here...\", label: \"Search:  \" };\r\nconst items = { label: \"Rows\", values: [5, 10, 25, 50, 75, 100] };\r\n\r\nconst Riders = () => {\r\n  const [responseData, setResponseData] = useState(\"\");\r\n  const [riderpkid, setRiderpkid] = useState(\"\");\r\n  const [Suggestion, SetSuggestion] = useState(\"\");\r\n  const [Reason, SetReason] = useState(\"\");\r\n  const [block, setBlock] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const GetRiders = () => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: TAABEDAR_SERVICE + \"/GetRiders\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      params: {\r\n        language_code: \"en\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        setResponseData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  React.useEffect(() => {\r\n    GetRiders();\r\n  }, []);\r\n\r\n  const blockRider = (pkid) => {\r\n    console.log(\"pkid!   \" + pkid);\r\n    console.log(\"Suggestion!   \" + Suggestion);\r\n    console.log(\"Reason!   \" + Reason);\r\n\r\n    if (Suggestion == \"Select Suggestion\") {\r\n      alert(\"Please Select Suggestion\");\r\n    } else if (Reason == \"\" || Reason == null) {\r\n      alert(\"Please Give Reason\");\r\n    } else {\r\n      axios({\r\n        method: \"GET\",\r\n        url:\r\n          TAABEDAR_SERVICE +\r\n          \"/BlockRiders/\" +\r\n          pkid +\r\n          \"/\" +\r\n          Reason +\r\n          \"/\" +\r\n          Suggestion +\r\n          \"\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        params: {\r\n          language_code: \"en\",\r\n        },\r\n      })\r\n        .then((response) => {\r\n          console.log(\"blockRider response : \" + response.data);\r\n          if (response.data == true) {\r\n            alert(\"Rider is Blocked!\");\r\n            GetRiders();\r\n            setBlock(!block);\r\n            SetSuggestion(\"Select Suggestion\");\r\n            SetReason(\"\");\r\n          } else {\r\n            alert(\"Rider is Not Blocked!\");\r\n            GetRiders();\r\n            SetSuggestion(\"Select Suggestion\");\r\n            SetReason(\"\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const getpkid = (pkid) => {\r\n    SetSuggestion(\"Select Suggestion\");\r\n    SetReason(\"\");\r\n    setRiderpkid(pkid);\r\n    setBlock(!block);\r\n  };\r\n\r\n  const SuggestionChange = (event) => {\r\n    SetSuggestion(event.target.value);\r\n  };\r\n  const ReasonChange = (event) => {\r\n    SetReason(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <h1 id=\"ccmaster\">Riders</h1>\r\n      <CRow>\r\n        <CCol col=\"10\">\r\n          <CCard>\r\n            <CCardBody>\r\n              <CRow>\r\n                <CCol>\r\n                  <CCard>\r\n                    <CCardHeader>Available Riders</CCardHeader>\r\n                    <CCardBody>\r\n                      <CDataTable\r\n                        items={responseData}\r\n                        fields={fields}\r\n                        hover\r\n                        striped\r\n                        bordered\r\n                        sorter\r\n                        tableFilter={table}\r\n                        itemsPerPage={4}\r\n                        pagination\r\n                        size=\"sm\"\r\n                        itemsPerPageSelect={items}\r\n                        scopedSlots={{\r\n                          \"Sl No\": (item) => <td>{item.id}</td>,\r\n                          Block: (item) => (\r\n                            <td>\r\n                              <CRow>\r\n                                <CCol md=\"9\">\r\n                                  <CButton\r\n                                    size=\"sm\"\r\n                                    id=\"deactivate\"\r\n                                    onClick={() => {\r\n                                      getpkid(item.pkid);\r\n                                    }}\r\n                                  >\r\n                                    <NoEncryptionSharpIcon />\r\n                                  </CButton>\r\n                                </CCol>\r\n                              </CRow>\r\n                            </td>\r\n                          ),\r\n\r\n                          Name: (item) => (\r\n                            <td>\r\n                               <CButton\r\n                                id=\"order-list\"\r\n                                onClick={() => {\r\n                                  history.push ('/RiderProfile', {\r\n                                    data: item,\r\n                                  });\r\n                                }}\r\n                              >\r\n                                {item.Name}\r\n                              </CButton>\r\n                             \r\n                            </td>\r\n                          ),\r\n                          \"E-Mail\": (item) => <td>{item.Email}</td>,\r\n                          Mobile: (item) => <td>{item.Mobile}</td>,\r\n                          \"DL No\": (item) => <td>{item.dlNo}</td>,\r\n                          \"Total Orders\": (item) => (\r\n                            <td>\r\n                              <CButton\r\n                                id=\"order-list\"\r\n                                onClick={() => {\r\n                                  history.push(\"/RiderTotalOrder\", {\r\n                                    data: item.pkid,\r\n                                  });\r\n                                }}\r\n                              >\r\n                                {item.totalOrders}\r\n                              </CButton>\r\n                            </td>\r\n                          ),\r\n                          \"Total Distance\": (item) => (\r\n                            <td>{item.totalDistance}</td>\r\n                          ),\r\n                          \"Total Delivery\": (item) => (\r\n                            <td>{item.TotalOrders}</td>\r\n                          ),\r\n                          Ratings: (item) => <td>{5}</td>,\r\n                          \"Total Earnings\": (item) => <td>{6000}</td>,\r\n                          \"Non Responded Orders\": (item) => (\r\n                            <td>\r\n                              <CButton\r\n                                id=\"order-list\"\r\n                                onClick={() => {\r\n                                  history.push(\"/NonRespondedTotalOrders\", {\r\n                                    data: item.pkid,\r\n                                  });\r\n                                }}\r\n                              >\r\n                                {item.nonRespondedOrders}\r\n                              </CButton>\r\n                            </td>\r\n                          ),\r\n                        }}\r\n                      />\r\n                      <CModal\r\n                        show={block}\r\n                        onClose={() => setBlock(!block)}\r\n                        color=\"dark\"\r\n                      >\r\n                        <CModalHeader closeButton>\r\n                          <CModalTitle>Before Blocking</CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalBody>\r\n                          <br />\r\n                          <br />\r\n                          <CLabel>Select Suggestion to Unblock:</CLabel>\r\n                          <CSelect\r\n                            custom\r\n                            name=\"Suggestion\"\r\n                            id=\"Suggestion\"\r\n                            value={Suggestion}\r\n                            onChange={SuggestionChange}\r\n                          >\r\n                            <option value=\"Select Suggestion\">\r\n                              Select Suggestion\r\n                            </option>\r\n                            <option value=\"Not Clear Details\">\r\n                              Not Clear Details\r\n                            </option>\r\n                            <option value=\"Invalid DL No\">Invalid DL No</option>\r\n                            <option value=\"Wrong Email\">Wrong Email</option>\r\n                          </CSelect>\r\n                          <br />\r\n                          <br />\r\n\r\n                          <TextField\r\n                            id=\"outlined-multiline-static\"\r\n                            label=\"Blocking Reason\"\r\n                            multiline\r\n                            rows={4}\r\n                            onChange={ReasonChange}\r\n                            value={Reason}\r\n                            variant=\"outlined\"\r\n                            style={{\r\n                              width: \"100%\",\r\n                            }}\r\n                          />\r\n                          <br />\r\n                          <br />\r\n                          <CButton\r\n                            class=\"btn btn-square btn-success\"\r\n                            onClick={() => blockRider(riderpkid)}\r\n                          >\r\n                            Submit\r\n                          </CButton>\r\n                        </CModalBody>\r\n                        <CModalFooter>\r\n                          <CButton\r\n                            color=\"secondary\"\r\n                            onClick={() => setBlock(!block)}\r\n                          >\r\n                            Close\r\n                          </CButton>\r\n                        </CModalFooter>\r\n                      </CModal>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Riders;\r\n"],"sourceRoot":""}